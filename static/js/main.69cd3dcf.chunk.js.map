{"version":3,"sources":["components/Aggro.js","components/Die.js","components/Health.js","pages/Champion.js","redux/actions/championActions.js","pages/Monster.js","redux/actions/monsterActions.js","pages/CustomDice.js","redux/actions/customDiceActions.js","App.js","redux/reducers/championReducer.js","redux/reducers/monsterReducer.js","redux/reducers/customDiceReducer.js","redux/reducers/index.js","index.js"],"names":["Aggro","props","useState","count","setCount","update","value","newCount","setBaseAggro","className","onClick","aggro","Die","minVal","min","maxVal","max","number","Math","floor","random","setDiceRoll","roll","Health","setHealth","health","connect","state","championReducer","baseAggro","lastDiceRoll","dispatch","updateChampionHealth","type","payload","updateHealth","updateBaseAggro","updateDieRoll","id","monsterReducer","updateMonsterHealth","customDiceReducer","setDiceMin","updateMin","setDiceMax","updateMax","onChange","e","target","App","to","exact","path","initialState","action","combineReducers","store","createStore","reducers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69cd3dcf.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Aggro(props) {\r\n  const [count, setCount] = useState(0);\r\n  function update(value) {\r\n    if (count === 0 && value < 0) {\r\n      return;\r\n    }\r\n    const newCount = count + value;\r\n    setCount(newCount);\r\n    props.setBaseAggro(newCount);\r\n  }\r\n\r\n  return (\r\n    <div className='grid-container'>\r\n      <h1 className='name'>Aggro</h1>\r\n      <button className='decrease' onClick={() => update(-1)}>\r\n        -\r\n      </button>\r\n      <h1 className='number'>{props.aggro}</h1>\r\n      <button className='increase' onClick={() => update(1)}>\r\n        +\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Aggro;\r\n","import React from 'react';\r\n\r\nfunction Die(props) {\r\n  const minVal = props.min;\r\n  const maxVal = props.max;\r\n\r\n  const handleRandomNum = () => {\r\n    const number = Math.floor(Math.random() * (maxVal - minVal + 1) + minVal);\r\n    props.setDiceRoll(number);\r\n  };\r\n\r\n  return (\r\n    <div className='grid-container-two'>\r\n      <button className='diceButton' onClick={handleRandomNum}>\r\n        Roll Dice\r\n      </button>\r\n      <h1 className='dice'>\r\n        <span>{props.roll}</span>\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Die;\r\n","import React, { useState } from 'react';\r\n\r\nfunction Health(props) {\r\n  const [count, setCount] = useState(0);\r\n  function update(value) {\r\n    if (count === 0 && value < 0) {\r\n      return;\r\n    }\r\n    const newCount = count + value;\r\n    setCount(newCount);\r\n    props.setHealth(newCount);\r\n  }\r\n\r\n  return (\r\n    <div className='grid-container'>\r\n      <h1 className='name'>Health</h1>\r\n      <button className='decrease' onClick={() => update(-1)}>\r\n        -\r\n      </button>\r\n      <h1 className='number'>{props.health}</h1>\r\n      <button className='increase' onClick={() => update(1)}>\r\n        +\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Health;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Aggro from '../components/Aggro';\r\nimport Die from '../components/Die';\r\nimport Health from '../components/Health';\r\n\r\nimport {\r\n  updateHealth,\r\n  updateBaseAggro,\r\n  updateDieRoll,\r\n} from '../redux/actions/championActions';\r\n\r\nfunction Champion(props) {\r\n  return (\r\n    <>\r\n      <Health health={props.health} setHealth={props.updateChampionHealth} />\r\n      <Aggro aggro={props.baseAggro} setBaseAggro={props.updateBaseAggro} />\r\n      <div id='totalAggro'>\r\n        Total Aggro: {props.baseAggro + props.lastDiceRoll}\r\n      </div>\r\n      <Die\r\n        min={1}\r\n        max={20}\r\n        roll={props.lastDiceRoll}\r\n        setDiceRoll={props.setDiceRoll}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  health: state.championReducer.health,\r\n  baseAggro: state.championReducer.baseAggro,\r\n  lastDiceRoll: state.championReducer.lastDiceRoll,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateChampionHealth: (health) => dispatch(updateHealth(health)),\r\n  updateBaseAggro: (aggro) => dispatch(updateBaseAggro(aggro)),\r\n  setDiceRoll: (roll) => dispatch(updateDieRoll(roll)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Champion);\r\n","export const updateHealth = (health) => {\r\n  return { type: 'UPDATE_CHAMPION_HEALTH', payload: health };\r\n};\r\n\r\nexport const updateBaseAggro = (aggro) => {\r\n  return { type: 'UPDATE_CHAMPION_AGGRO', payload: aggro };\r\n};\r\n\r\nexport const updateDieRoll = (roll) => {\r\n  return { type: 'UPDATE_CHAMPION_ROLL', payload: roll };\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Die from '../components/Die';\r\nimport Health from '../components/Health';\r\n\r\nimport { updateHealth, updateDieRoll } from '../redux/actions/monsterActions';\r\n\r\nfunction Monster(props) {\r\n  return (\r\n    <>\r\n      <Health health={props.health} setHealth={props.updateMonsterHealth} />\r\n      <Die\r\n        min={1}\r\n        max={6}\r\n        roll={props.lastDiceRoll}\r\n        setDiceRoll={props.setDiceRoll}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  health: state.monsterReducer.health,\r\n  lastDiceRoll: state.monsterReducer.lastDiceRoll,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateMonsterHealth: (health) => dispatch(updateHealth(health)),\r\n  setDiceRoll: (roll) => dispatch(updateDieRoll(roll)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Monster);\r\n","export const updateHealth = (health) => {\r\n  return { type: 'UPDATE_MONSTER_HEALTH', payload: health };\r\n};\r\n\r\nexport const updateBaseAggro = (aggro) => {\r\n  return { type: 'UPDATE_MONSTER_AGGRO', payload: aggro };\r\n};\r\n\r\nexport const updateDieRoll = (roll) => {\r\n  return { type: 'UPDATE_MONSTER_ROLL', payload: roll };\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n  updateMin,\r\n  updateMax,\r\n  updateDieRoll,\r\n} from '../redux/actions/customDiceActions';\r\n\r\nfunction CustomDice(props) {\r\n  const handleRandomNum = () => {\r\n    props.setDiceRoll(\r\n      Math.floor(Math.random() * (props.max - props.min + 1) + props.min)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className='hero'>\r\n      <h2>Custom Dice</h2>\r\n      <div className='container'>\r\n        <div className='numContainer'>\r\n          <div>\r\n            <p>Min</p>\r\n            <input\r\n              type='number'\r\n              value={props.min}\r\n              onChange={(e) => props.setDiceMin(+e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <p>Max</p>\r\n            <input\r\n              type='number'\r\n              value={props.max}\r\n              onChange={(e) => props.setDiceMax(+e.target.value)}\r\n            />\r\n          </div>\r\n          <br />\r\n        </div>\r\n        <button onClick={handleRandomNum}>Roll Dice</button>\r\n      </div>\r\n      <div className='randomNum'>\r\n        <p>\r\n          You rolled a <span>{props.lastDiceRoll}</span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  min: state.customDiceReducer.min,\r\n  max: state.customDiceReducer.max,\r\n  lastDiceRoll: state.monsterReducer.lastDiceRoll,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setDiceMin: (min) => dispatch(updateMin(min)),\r\n  setDiceMax: (max) => dispatch(updateMax(max)),\r\n  setDiceRoll: (roll) => dispatch(updateDieRoll(roll)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomDice);\r\n","export const updateMin = (min) => {\r\n  return { type: 'UPDATE_MIN', payload: min };\r\n};\r\n\r\nexport const updateMax = (max) => {\r\n  return { type: 'UPDATE_MAX', payload: max };\r\n};\r\n\r\nexport const updateDieRoll = (roll) => {\r\n  return { type: 'UPDATE_MONSTER_ROLL', payload: roll };\r\n};\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Link, Switch, Route } from 'react-router-dom';\r\n\r\nimport Home from './pages/Champion';\r\nimport Monster from './pages/Monster';\r\nimport CustomDice from './pages/CustomDice';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h1>Paper Dungeon Scoreboard</h1>\r\n\r\n      <Router>\r\n        <nav id='nav'>\r\n          <li id='li'>\r\n            <Link id='a' to='/'>\r\n              Champion\r\n            </Link>\r\n          </li>\r\n          <li id='li'>\r\n            <Link id='a' to='/Monster'>\r\n              Monster\r\n            </Link>\r\n          </li>\r\n          <li id='li'>\r\n            <Link id='a' to='/CustomDice'>\r\n              Custom Dice\r\n            </Link>\r\n          </li>\r\n        </nav>\r\n        <Switch>\r\n          <Route exact path='/'>\r\n            <Home />\r\n          </Route>\r\n\r\n          <Route path='/Monster'>\r\n            <Monster />\r\n          </Route>\r\n\r\n          <Route path='/CustomDice'>\r\n            <CustomDice />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const initialState = {\r\n  health: 0,\r\n  baseAggro: 0,\r\n  lastDiceRoll: 0,\r\n};\r\n\r\nconst championReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'UPDATE_CHAMPION_HEALTH':\r\n      return {\r\n        ...state,\r\n        health: action.payload,\r\n      };\r\n    case 'UPDATE_CHAMPION_AGGRO':\r\n      return {\r\n        ...state,\r\n        baseAggro: action.payload,\r\n      };\r\n    case 'UPDATE_CHAMPION_ROLL':\r\n      return {\r\n        ...state,\r\n        lastDiceRoll: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default championReducer;\r\n","const initialState = {\r\n  health: 0,\r\n  lastDiceRoll: 0,\r\n};\r\n\r\nconst monsterReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'UPDATE_MONSTER_HEALTH':\r\n      return {\r\n        ...state,\r\n        health: action.payload,\r\n      };\r\n    case 'UPDATE_MONSTER_ROLL':\r\n      return {\r\n        ...state,\r\n        lastDiceRoll: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default monsterReducer;\r\n","const initialState = {\r\n  min: 1,\r\n  max: 20,\r\n  lastDiceRoll: 0,\r\n};\r\n\r\nconst customDiceReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'UPDATE_MIN':\r\n      return {\r\n        ...state,\r\n        min: action.payload,\r\n      };\r\n    case 'UPDATE_MAX':\r\n      return {\r\n        ...state,\r\n        max: action.payload,\r\n      };\r\n    case 'UPDATE_LAST_ROLL':\r\n      return {\r\n        ...state,\r\n        lastDiceRoll: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default customDiceReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport championReducer from './championReducer';\r\nimport monsterReducer from './monsterReducer';\r\nimport customDiceReducer from './customDiceReducer';\r\n\r\nexport default combineReducers({\r\n  championReducer,\r\n  monsterReducer,\r\n  customDiceReducer,\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n\r\nimport App from './App';\r\nimport reducers from './redux/reducers';\r\n\r\nlet store = createStore(reducers);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}